import processing.serial.*;
 
 Serial _serialPort;        // The serial port
 float _xPos = 0;         // horizontal position of the graph
 int _width=1800;
 int _height=1000;
 int max_height=_height/5; 
 int curr=max_height;
 
 //vars for wave
 int xspacing = 16;   // How far apart should each horizontal location be spaced
  int w;              // Width of entire wave
  float theta = 0.0;  // Start angle at 0
  float amplitude = 75.0;  // Height of wave
  float period = 500.0;  // How many pixels before the wave repeats
  float dx;  // Value for incrementing X, a function of period and xspacing
  float[] yvalues;  // Using an array to store height values for the wave

 void setup () {
   // set the window size:
   size(_width, _height); 
   
   //for wave
   w = width+16;
  dx = (TWO_PI / period) * xspacing;
  yvalues = new float[w/xspacing];
     
       background(0);
  noStroke();
  
   // List all the available serial ports
   println(Serial.list());
   
   _serialPort = new Serial(this, Serial.list()[1], 9600);

   _serialPort.bufferUntil('\n');

   background(0);
 }
 
 float xoff = 0.0;
float xincrement = 0.01; 

void draw()
{
  
}
//
// void draw () {
// // everything happens in the serialEvent()
// }
// 
 void serialEvent (Serial _serialPort) {  
 // get the ASCII string:
 String inString = _serialPort.readStringUntil('\n');
 //println(inString);
 String val;
 if (inString != null) {
   // trim off any whitespace:
   inString = trim(inString);
   String[] parts = split(inString, ',');

   if(parts[0].equals("A")){
     val=(parts[1]);
     //println(val);
     int analogVal=int(val);

  createNoise(analogVal);
     
   }

   else if(parts[0].equals("B")){
     val=(parts[1]);
     //println(val);
     int analogVal=int(val);

int yPixelValue=(int)map(analogVal,0,1023,0,max_height);
     int redColor=(int)map(analogVal,0,1023,0,255);
     stroke(redColor,34,255);
     line(_xPos,(height/6)+yPixelValue,_xPos,(height/6)-yPixelValue);   
   }

   else if(parts[0].equals("C")){
     val=(parts[1]);
     int analogVal=int(val);
       calcWave(analogVal);
       renderWave(analogVal);
   }
   
   else if(parts[0].equals("dig11")){
     val=parts[1];
     int digitalVal=int(val);
     int s=(int)map(random(digitalVal)*255, 0,255,0,max_height/2);
     stroke(random(255),random(255),random(255));
     noFill();
     ellipse(random(1800), random(1000), s,s);
   }
      
   else if(parts[0].equals("dig12")){
     val=parts[1];
     int digitalVal=int(val);
     if(digitalVal ==0){
       int s=(int)map(random(255), 0,255,0,max_height/2);
       
       fill(random(255),random(255),random(255));
       ellipse(random(1800), random(1000), s,s);
     }
   }
    
   if (_xPos>width){
     _xPos=0; 
     background(0);
   }
   _xPos=_xPos+0.2;
   } 
 }
 
 void calcWave(int  val) {
    // Increment theta (try different values for 'angular velocity' here
    theta += 0.02;
  
    // For every x value, calculate a y value with sine function
    float x = theta;
    for (int i = 0; i < yvalues.length; i++) {
      yvalues[i] = sin(x)*(amplitude/2+val/7);
      x+=dx;
    }
  }
  
  void renderWave(int val) {
    noStroke();
    int  c=(int)map(val,0,1023,0,255);
    fill(c,20,70);
    // A simple way to draw the wave with an ellipse at each location
    for (int x = 0; x < yvalues.length; x++) {
      ellipse(x*xspacing, 2*height/3+yvalues[x], 12, 12);
    }
  }
  
  void createNoise(int val){
  // Create an alpha blended background
  fill(0, 10);
  rect(0,0,width,height);
  
  //float n = random(0,width);  // Try this line instead of noise
  
  // Get a noise value based on xoff and scale it according to the window's width
  float n = noise(xoff)*width;
  
  // With each cycle, increment xoff
  xoff += xincrement;
  
  // Draw the ellipse at the value produced by perlin noise
  fill(200);
  ellipse(n,height/2-val/2, 64, 64);
  }
