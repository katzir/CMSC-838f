import processing.serial.*;
 
 Serial _serialPort;        // The serial port
 float _xPos = 50;         // horizontal position of the graph
 //int ypos = height/2;
 int _width=1800;
 int _height=1000;
 int max_height=_height/5; 

 void setup () {
   // set the window size:
   size(_width, _height); 

   // List all the available serial ports
   println(Serial.list());
   _serialPort = new Serial(this, Serial.list()[1], 9600);
   // don't generate a serialEvent() unless you get a newline character:
   _serialPort.bufferUntil('\n');
   // set inital background:
   background(0);
 }
 void draw () {
 // everything happens in the serialEvent() 
 }
 
 void serialEvent (Serial _serialPort) {  

 // get the ASCII string:
 String inString = _serialPort.readStringUntil('\n');
 //println(inString);
 String val;
 if (inString != null) {
   // trim off any whitespace:
   inString = trim(inString);
   String[] parts = split(inString, ',');

   if(parts[0].equals("A")){
     val=(parts[1]);
     //println(val);
     int analogVal=int(val);
     int yPixelValue=(int)map(analogVal,0,1023,0,height-max_height);
     stroke(255,0,0);
     line(_xPos,(height-yPixelValue-20),_xPos,(height-yPixelValue));
   }
   else if(parts[0].equals("B")){
     val=(parts[1]);
     int analogVal=int(val);
     int yPixelValue=(int)map(analogVal,0,1023,0,height-max_height);
     stroke(255,255,0);
     line(_xPos,(height-yPixelValue-20),_xPos,(height-yPixelValue));
   }

   else if(parts[0].equals("C")){
     val=(parts[1]);
     int analogVal=int(val);
     int yPixelValue=(int)map(analogVal,0,1023,0,height-max_height);
     stroke(0,191,255);
     line(_xPos, (height-yPixelValue-20),_xPos,(height-yPixelValue));
   }
   
   else if(parts[0].equals("dig11")){
     val=parts[1];
     int digitalVal=int(val);
     int len = 0;
     if(digitalVal-1==0){
       len=max_height/4;
     } 
     stroke(255,250,250);
     if(len !=0){
       line(_xPos,(height-4.3*max_height),_xPos,(height-4.3*max_height-len));
     } else {
       line(_xPos,(height-4.3*max_height),_xPos,(height-4.3*max_height-1));
     }
   }
      
   else if(parts[0].equals("dig12")){
     val=parts[1];
     int digitalVal=int(val);
     int len = 0;
     if(digitalVal==0){
       len=max_height/4;
     } 
     stroke(222,184,135);
     if(len !=0){
       line(_xPos,(height-4.6*max_height),_xPos,(height-4.6*max_height-len));
     }else {
       line(_xPos,(height-4.6*max_height),_xPos,(height-4.6*max_height-1));
     }
   }
     
   
   if (_xPos>width){
     _xPos=0; 
     background(0);
   }
   _xPos=_xPos+0.15;
   } 
 }
